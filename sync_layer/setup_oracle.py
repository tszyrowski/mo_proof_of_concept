import os
import sys

import cx_Oracle

try:
    from db_connection import get_oracle_connection
    from core_functionalities.app_logging import get_logger
except ModuleNotFoundError:
    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    from core_functionalities.app_logging import get_logger
    from sync_layer.db_connection import get_oracle_connection

logger = get_logger()


def table_exists(cursor, table_name):
    """
    Check if a table exists in the Oracle database.

    :param cursor: Oracle cursor object
    :param table_name: Name of the table to check
    :return: True if the table exists, False otherwise
    """
    cursor.execute(
        """
        SELECT table_name 
        FROM user_tables 
        WHERE table_name = :1
        """,
        [table_name.upper()],
    )
    return cursor.fetchone() is not None


def setup_oracle_db():
    """
    Set up the Oracle database with the necessary tables and initial data.
    """
    try:
        oracle_conn = get_oracle_connection()  # Use the centralized connection
        oracle_cursor = oracle_conn.cursor()

        oracle_cursor.execute(
            "SELECT user, sys_context('USERENV', 'CURRENT_SCHEMA') FROM dual"
        )
        result = oracle_cursor.fetchone()
        logger.info(
            f"Connected to Oracle as user: {result[0]}, schema: {result[1]}"
        )

        oracle_cursor.execute(
            "SELECT sys_context('USERENV', 'CON_NAME') FROM dual"
        )
        pdb_name = oracle_cursor.fetchone()
        logger.info(f"Connected to PDB: {pdb_name[0]}")

        # Table creation statements
        table_definitions = {
            "INSPECTIONS": """
                CREATE TABLE inspections (
                    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    site_name VARCHAR2(255) NOT NULL,
                    status VARCHAR2(50) NOT NULL,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """,
            "SIDES": """
                CREATE TABLE sides (
                    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    side_name VARCHAR2(255) NOT NULL
                )
            """,
            "QUESTIONS": """
                CREATE TABLE questions (
                    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    side_id NUMBER NOT NULL,
                    question VARCHAR2(255) NOT NULL,
                    CONSTRAINT fk_side
                        FOREIGN KEY (side_id)
                        REFERENCES sides(id)
                        ON DELETE CASCADE
                )
            """,
            "USERS": """
                CREATE TABLE users (
                    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    username VARCHAR2(50) UNIQUE NOT NULL,
                    password VARCHAR2(255) NOT NULL
                )
            """,
            "SYNC_METADATA": """
                CREATE TABLE sync_metadata (
                    sync_id NUMBER PRIMARY KEY,
                    last_sync TIMESTAMP
                )
            """,
        }
        oracle_cursor.execute(
            "SELECT user, sys_context('USERENV', 'CURRENT_SCHEMA') FROM dual"
        )
        result = oracle_cursor.fetchone()
        logger.info(
            f"Connected to Oracle as user: {result[0]}, schema: {result[1]}"
        )

        # Drop and create tables
        for table_name, create_statement in table_definitions.items():
            if table_exists(oracle_cursor, table_name):
                print(f"Dropping existing table: {table_name}")
                oracle_cursor.execute(
                    f"DROP TABLE {table_name} CASCADE CONSTRAINTS"
                )
                oracle_conn.commit()

            print(f"Creating table: {table_name}")
            try:
                oracle_cursor.execute(create_statement)
                oracle_conn.commit()
                print(f"Table {table_name} created successfully.")

                # Verify table creation
                if not table_exists(oracle_cursor, table_name):
                    print(f"Error: {table_name} was not created successfully.")
                else:
                    print(f"Table {table_name} exists.")
            except cx_Oracle.Error as e:
                print(f"Error creating table {table_name}: {e}")

        # Insert initial data
        try:
            print("Inserting initial data...")

            # Insert admin user
            oracle_cursor.execute(
                """
                INSERT INTO users (username, password)
                VALUES (:1, :2)
                """,
                ("admin", "pass"),
            )

            # Insert sides
            sides_data = [("Side A",), ("Side B",), ("Side C",)]
            oracle_cursor.executemany(
                "INSERT INTO sides (side_name) VALUES (:1)", sides_data
            )

            # Commit after inserting sides
            oracle_conn.commit()

            # Retrieve side_ids
            oracle_cursor.execute("SELECT id, side_name FROM sides")
            sides = oracle_cursor.fetchall()
            side_dict = {side_name: side_id for side_id, side_name in sides}

            # Insert questions based on side_ids
            questions = [
                (side_dict["Side A"], "What is the site name?"),
                (side_dict["Side A"], "What is the elevation?"),
                (side_dict["Side A"], "What is the noise level?"),
                (side_dict["Side B"], "What is the area size?"),
                (side_dict["Side B"], "What is the wind direction?"),
                (side_dict["Side B"], "Are there terrain changes?"),
                (side_dict["Side C"], "What is the station type?"),
                (side_dict["Side C"], "Is there visible corrosion?"),
                (side_dict["Side C"], "Are there signs of condensation?"),
            ]

            oracle_cursor.executemany(
                "INSERT INTO questions (side_id, question) VALUES (:1, :2)",
                questions,
            )

            # Commit after inserting questions and users
            oracle_conn.commit()

            print("Inserted initial data successfully.")
        except cx_Oracle.Error as e:
            print("Error inserting initial data:", e)
            oracle_conn.rollback()
        finally:
            # Close connections
            oracle_cursor.close()
            oracle_conn.close()
            print("Oracle DB setup completed and connections closed.")

    except cx_Oracle.Error as e:
        print(f"Error during setup: {e}")


if __name__ == "__main__":
    setup_oracle_db()
